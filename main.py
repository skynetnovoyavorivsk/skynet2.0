# -*- coding: utf-8 -*-

import logging
import config
from aiogram import *
from aiogram.types import *
from aiogram.utils.callback_data import CallbackData
import sqlite3 as sq
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from captcha.image import ImageCaptcha
import random
import aiogram.utils.markdown as md
from datetime import *
import pytz
import os 
from aiogram import Bot, Dispatcher, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.builtin import Text
from aiogram.dispatcher.filters.state import State, StatesGroup, any_state
from aiogram.dispatcher.handler import CancelHandler
from config import TIMEZONE
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import BotBlocked

async def send_error_chat(*args, **kwargs):
    await bot.send_message(config.error, *args, **kwargs)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

answer_live_cb = CallbackData("answer_live", "user_id")
send_commercial_cb = CallbackData("commercial", "user_id")
support_cb = CallbackData("ask_support", "messages", "user_id", "as_user")
cancel_support_callback = CallbackData("cancel_support", "user_id")
cancel_cb = CallbackData("cancel", "step")

ORDER_MESSAGES = {
    "exit": "–°–∫–∞—Å–æ–≤–∞–Ω–æ \n\n –©–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëâ /start",
}

cancel_support = InlineKeyboardMarkup().add(
    InlineKeyboardButton(
        text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
        callback_data="cancel_support",
    )
)

def get_cancel_button(step: str = ""):
    if step == "":
        text = "‚ùå–í–∏—Ö—ñ–¥"
    else:
        text = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    callback = cancel_cb.new(step=step)
    return InlineKeyboardButton(text, callback_data=callback)

@dp.callback_query_handler(cancel_cb.filter(), state=any_state)
async def handle_cancel(call: CallbackQuery, callback_data: dict, state: FSMContext):
    step: str = callback_data.get("step")
    if step == "":
        await state.finish()
        await call.message.edit_text(ORDER_MESSAGES["exit"])

def get_cancel_kb(step: str = ""):
    cancel_button = get_cancel_button(step)
    return InlineKeyboardMarkup().add(cancel_button)

cancel_button1 = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad_button")
)

cancel_button2 = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad_button2")
)

cancel_button3 = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad_button3")
)

cancel_button4 = InlineKeyboardMarkup().add(
    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="nazad_button4")
)

class Form(StatesGroup):
    pib = State()
    abonplata = State()
    phone = State()
    address = State()
    captcha = State()

    canceled = State()

class Mailing(StatesGroup):
    Text = State()
    canceled = State()

class SupportStates(StatesGroup):
    commercial_msg = State()
    waiting_live = State()
    busy = State()

stop_button = [InlineKeyboardButton(text="‚ùå–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="stop_rozsulka")]
stop_keyboard  = InlineKeyboardMarkup(inline_keyboard=[stop_button])

# –í–Ü–î–ü–†–ê–í–õ–ï–ù–ù–Ø –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–Ü–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –í –°–ê–ü–ü–û–†–¢
@dp.message_handler(
    state=SupportStates.busy,
    content_types=ContentType.ANY,
)
async def send_msg_to_support_many(message: Message, state: FSMContext):
    data = await state.get_data()
    second_id = data["second_id"]
    try:
        await message.copy_to(second_id, reply_markup=cancel_support)
    except BotBlocked:
        await message.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
    except Exception as error:
        await message.reply("–ù–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
        await send_error_chat(f"–ü–æ–º–∏–ª–∫–∞ –≤ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ: {error}")

@dp.message_handler(commands=['start'], state = '*')
async def start(message: types.Message, state:FSMContext):
	await state.finish()
	with sq.connect("clients.db") as con:
		cur = con.cursor()
		cur.execute(f"""SELECT id FROM users WHERE id LIKE {message.from_user.id}""")
		user = str(cur.fetchall())
		if user == str([]):
			cur.execute(f"INSERT INTO users VALUES({str(message.from_user.id)})")
		else:
			pass

		choice = InlineKeyboardMarkup(
            inline_keyboard=[

                [InlineKeyboardButton(text="–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", callback_data="support")],
                [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª—É–≥", callback_data="–û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª—É–≥")]])
		await message.answer(f"<b>–î–æ–±—Ä–æ–≥–æ —á–∞—Å—É –¥–æ–±–∏,</b> {message.from_user.first_name}"
                             f"\n–í—ñ—Ç–∞—î–º–æ —É Telegram-bot - <b>–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ SkyNet</b>"
                             f"\n\n–í–∏–±–µ—Ä–∏ –∫–Ω–æ–ø–∫–æ—é '–ü—ñ–¥—Ç—Ä–∏–º–∫–∞' —Ç–∞ –∑–≤'—è–∂–∏—Å—å –∑ –Ω–∞—à–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º,–∞–±–æ —è–∫—â–æ —Ç–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–≤ –∑–∞ Internet - –º–æ–∂–µ—à –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑!\n\nüë®üèª‚Äçüíª–†–æ–∑—Ä–æ–±–Ω–∏–∫:N.Ivakhiv",
                             parse_mode='html', reply_markup=choice)

@dp.callback_query_handler(lambda call: call.data == '–û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª—É–≥')
async def inet(call: CallbackData):
    await Form.pib.set()
    await call.answer()
    await bot.send_message(call.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –ü–Ü–ë:\n–Ø–∫–∏–π —î –≤–∫–∞–∑–∞–Ω–∏–π —É –¥–æ–≥–æ–≤–æ—Ä—ñ –∑ –Ω–∞–º–∏.")

@dp.message_handler(state=Form.pib)
async def process_pib(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['pib'] = message.text
        await Form.next()
        await bot.send_message(message.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ –º—ñ—Å—è—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω—É —è–∫–∏–π —î –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —É –¥–æ–≥–æ–≤–æ—Ä—ñ", reply_markup=cancel_button1)

@dp.callback_query_handler(lambda call: call.data == "nazad_button", state=Form.abonplata)
async def process_pib_nazad(call: types.Message, state: FSMContext):
    await call.answer()
    await Form.pib.set()
    await bot.send_message(call.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –ü–Ü–ë:\n–Ø–∫–∏–π —î –≤–∫–∞–∑–∞–Ω–∏–π —É –¥–æ–≥–æ–≤–æ—Ä—ñ –∑ –Ω–∞–º–∏.")

@dp.message_handler(state=Form.abonplata)
async def process_abonplata(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if((message.text).isdigit()):
            data['abonplata'] = message.text
            await Form.next()
            await bot.send_message(message.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É!\n–í —Ñ–æ—Ä–º–∞—Ç—ñ +380..", reply_markup=cancel_button2)
        else:
            await bot.send_message(message.from_user.id, "–¶–µ –Ω–µ —á–∏—Å–ª–æ! –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è")

@dp.callback_query_handler(lambda call: call.data == "nazad_button2", state=Form.phone)
async def process_aboplata_nazad(call: types.Message, state: FSMContext):
    await call.answer()
    await Form.abonplata.set()
    await bot.send_message(call.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å –≤–∞—à–æ–≥–æ –º—ñ—Å—è—á–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω—É —è–∫–∏–π —î –∑–∞–∑–Ω–∞—á–µ–Ω–∏–π —É –¥–æ–≥–æ–≤–æ—Ä—ñ")

@dp.message_handler(lambda message: not len(message.text)==13, state=Form.phone)
async def process_phone_invalid(message: types.Message):
    return await bot.send_message(message.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É")

@dp.callback_query_handler(lambda call: call.data == "nazad_button3", state=Form.address)
async def process_phone_nazad(call: types.Message, state: FSMContext):
    await call.answer()
    await Form.phone.set()
    await bot.send_message(call.from_user.id, "–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É!\n–í —Ñ–æ—Ä–º–∞—Ç—ñ +380..")

@dp.message_handler(lambda message: '+380' in (message.text) and len(message.text)==13 and message.text[1:12].isdigit(), state=Form.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await Form.next()
    await state.update_data(phone=(message.text))
    await bot.send_message(message.from_user.id, "üìç–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞?\n–í–∫–∞–∂—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç, –≤—É–ª–∏—Ü—é —Ç–∞ –±—É–¥–∏–Ω–æ–∫.", reply_markup=cancel_button3)

@dp.message_handler(state=Form.address)
async def process_gender(message: types.Message, state: FSMContext):
    await Form.next()
    async with state.proxy() as data:
        data['address'] = message.text
    await state.update_data(address=(message.text))

    image = ImageCaptcha(fonts=['fonts/A.ttf', 'fonts/A.ttf'])
    global captcha_num
    captcha_num = str(random.randint(1000, 9999))
    image.write(captcha_num, 'captcha.png')

    await bot.send_photo(message.from_user.id, photo=open('captcha.png', "rb"))

    await bot.send_message(message.from_user.id, "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —â–æ –≤–∏ –Ω–µ —Ä–æ–±–æ—Ç:", reply_markup=cancel_button4)

@dp.callback_query_handler(lambda call: call.data == "nazad_button4", state=Form.captcha)
async def process_captcha_nazad(call: types.Message, state: FSMContext):
    await call.answer()
    await Form.address.set()
    await bot.send_message(call.from_user.id, "üìç–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞?")

@dp.message_handler(lambda message: str(message.text)!=captcha_num, state=Form.captcha)
async def process_captcha_invalid(message: types.Message):
    await bot.send_message(message.from_user.id, "–ù–µ–≤—ñ—Ä–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ")

oplata_callback = CallbackData("–æ–ø–ª–∞—Ç–∞", "choice", "amount")
@dp.message_handler(lambda message: str(message.text)==captcha_num, state=Form.captcha)
async def process_captcha(message: types.Message, state: FSMContext):
    await state.update_data(captcha=(message.text))

    datatime_ua = datetime.now(pytz.timezone("Europe/Kiev"))
    datatime_ua = f"{str(datatime_ua)[0:10]}-{str(datatime_ua)[11:19]}"

    async with state.proxy() as data:
     name = (data['pib'])

    order = md.text(
                md.text("üë§–Ü–º'—è:", (data['pib'])),
                md.text('‚òé–¢–µ–ª–µ—Ñ–æ–Ω:', (data['phone'])),
                md.text("üí∞–¶—ñ–Ω–∞ –ø–æ—Å–ª—É–≥:", (data['abonplata']) + "–≥—Ä–Ω"),
                md.text('üè†–ê–¥—Ä–µ—Å–∞:', (data['address'])),
                md.text('‚åö–ß–∞—Å:', (datatime_ua)), sep='\n')
    perevirka = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ–¢–∞–∫", callback_data=oplata_callback.new(choice='yes', amount=(data['abonplata'])))],
            [InlineKeyboardButton(text="‚ùå–ù—ñ", callback_data="no")]])
    await state.update_data(order=str(order))
    await bot.send_message(message.chat.id, f'{md.text("–í—ñ—Ä–Ω—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ?", md.bold())}\n{order}', parse_mode="Markdown", reply_markup = perevirka)

@dp.callback_query_handler(lambda call: call.data == 'no', state=Form.captcha)
async def perevikra_no(call: CallbackData):
    await bot.send_message(call.message.chat.id, f"–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", parse_mode="Markdown")
    await bot.delete_message(call.message.chat.id, call.message.message_id)

@dp.callback_query_handler(oplata_callback.filter(choice='yes'), state=Form.captcha)
async def perevikra_yes(call: CallbackData, callback_data, state:FSMContext):
    await bot.send_document(call.message.chat.id, document=open('file/–î–æ–≥–æ–≤—ñ—Ä.pdf', 'rb'), caption="–ó–≥—ñ–¥–Ω–æ —Å—Ç–∞—Ç—Ç—ñ 633 –¶–ö –£–∫—Ä–∞—ó–Ω–∏ –≤–∏ –¥–∞—î—Ç–µ –∑–≥–æ–¥—É –Ω–∞ –ü–£–ë–õ–Ü–ß–ù–£ –û–§–ï–†–¢–£\n\n–ú–∏ —Ä–∞–¥—ñ —â–æ –≤–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–≤–Ω–∏–ª–∏ –¥–∞–Ω—ñ, –æ–ø–ª–∞—Ç—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∞—à —Ç–∞—Ä–∏—Ñüëáüèª", parse_mode="HTML") 
    await call.message.edit_reply_markup()
    await bot.send_invoice(call.message.chat.id, title = '–û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª—É–≥ SkyNet',
    description='–í–∏ –æ–ø–ª–∞—á—É—î—Ç–µ –º—ñ—Å—è—á–Ω—É –∞–±–Ω–æ–ø–ª–∞—Ç—É –∑–∞ –Ω–∞—à—ñ –ø–æ—Å–ª—É–≥–∏ –∑–≥—ñ–¥–Ω–æ –Ω–∞—à–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É –∑ –≤–∞–º–∏.',
    provider_token=config.LIQPAY_PROVIDER_TOKEN,
    prices=[
            types.LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –∑–∞ –º—ñ—Å—è—á–Ω—ñ –ø–æ—Å–ª—É–≥–∏:', amount=int(callback_data['amount'])*100),
          ],
        currency='uah',
        payload="test",
        start_parameter='time-machine-example',
        )

# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —á–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
@dp.pre_checkout_query_handler(state=Form.captcha)
async def checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

# –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ
@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT, state=Form.captcha)
async def got_payment(message: types.Message, state: FSMContext):
    await bot.send_message(message.chat.id,
        '–°–ø–ª–∞—á–µ–Ω–æ {} {}'.format(
            message.successful_payment.total_amount / 100,
            message.successful_payment.currency
        ),
    parse_mode='Markdown')
    data = await state.get_data()
    await bot.send_message(config.error, f'–õ—é–¥–∏–Ω–∞ –æ–ø–ª–∞—Ç–∏–ª–∞ –ø–æ—Å–ª—É–≥—É: {data["order"]}')
    await state.finish()

# ========= –ü–Ü–î–¢–†–ò–ú–ö–ê =========


async def check_support_available(support_id):
    state = dp.current_state(chat=support_id, user=support_id)
    current_state = await state.get_state()
    if current_state == SupportStates.busy.state:
        return False
    return support_id


async def get_free_supports():
    ids = config.support_ids
    random.shuffle(ids)
    free_ids = []
    for support_id in ids:
        support_id = await check_support_available(support_id)

        if support_id:
            free_ids.append(support_id)

    return free_ids


async def send_msg_commercial(message: Message, to_ids=None):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            "–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=send_commercial_cb.new(user_id=message.from_user.id),
        )
    )
    for user_id in to_ids:
        await bot.send_message(
            user_id, "–í–∞–º –ª–∏—Å—Ç! –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞ –Ω—å–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ."
        )
        await message.copy_to(user_id, reply_markup=keyboard)


@dp.callback_query_handler(Text(equals="support"))
async def support(call: CallbackQuery):
    await call.answer(cache_time=5)
    keyboard = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(text="–ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫", callback_data="support_live1"),
        InlineKeyboardButton(text="–®–∫–ª–æ", callback_data="support_live2"),
        InlineKeyboardButton(text="–°—Ç–∞—Ä–∏—á—ñ", callback_data="support_live3"),
        InlineKeyboardButton(text="–ü—ñ–¥–ª—É–±–∏", callback_data="support_live4"),
        InlineKeyboardButton(text="–ë–µ—Ä–¥–∏—Ö—ñ–≤", callback_data="support_live5"),
        InlineKeyboardButton(text="–ú–æ–ª–æ—à–∫–æ–≤–∏—á—ñ", callback_data="support_live6"),
        InlineKeyboardButton(text="–í–µ—Ä–µ—â–∏—Ü—è", callback_data="support_live7"),
        )
    await call.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —Å–≤—ñ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω–∏–π –ø—É–Ω–∫—Ç –¥–ª—è –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=keyboard,
    )


@dp.callback_query_handler(Text(equals="support_commercial"))
async def send_commercial(call: CallbackQuery):
    await SupportStates.commercial_msg.set()
    await call.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", reply_markup=get_cancel_kb())
    await call.answer()


@dp.callback_query_handler(send_commercial_cb.filter())
async def answer_commercial(
    call: CallbackQuery, callback_data: dict, state: FSMContext
):
    await SupportStates.commercial_msg.set()
    await state.update_data(second_id=callback_data["user_id"])
    await call.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å", reply_markup=get_cancel_kb())
    await call.answer()


@dp.message_handler(state=SupportStates.commercial_msg, content_types=ContentType.ANY)
async def process_commercial(message: Message, state: FSMContext):
    data = await state.get_data()
    second_id = data.get("second_id")
    await state.finish()

    status_msg = await message.answer("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...")
    # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ second_id, –∑–Ω–∞—á–∏—Ç—å —Ü–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –≤—ñ–¥—Å–∏–ª–∞—Ç–∏ –≤—Å—ñ–º
    if second_id is None:
        await send_msg_commercial(message, to_ids=config.commercial_ids)
    else:
        await send_msg_commercial(message, to_ids=[second_id])
    await status_msg.edit_text("–í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!")


@dp.callback_query_handler(Text(equals="support_live1"))
async def call_support(call: CallbackQuery):
    await call.answer()
    now = datetime.now(TIMEZONE)
    start_date = now.replace(hour=8, minute=0, second=0, microsecond=0)
    end_date = now.replace(hour=23, minute=59, second=55, microsecond=0)

    if now < start_date or now > end_date:
        await call.message.answer("–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Telegram –ø—Ä–∞—Ü—é—î –∑ —Ç—ñ–ª—å–∫–∏ 8:00 –¥–æ 00:00")
        return

    support_ids = config.support_ids_nya
    if not support_ids:
        await call.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    await SupportStates.waiting_live.set()
    await call.message.edit_text(
        "–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_cancel_kb(),
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=answer_live_cb.new(user_id=call.from_user.id),
        )
    )

    for user_id in support_ids:
        await bot.send_message(
            user_id,
            f"–ó –≤–∞–º–∏ —Ö–æ—á–µ –∑–≤—è–∑–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.get_mention()}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )

#############################################################

@dp.callback_query_handler(Text(equals="support_live2"))
async def call_support(call: CallbackQuery):
    await call.answer()
    now = datetime.now(TIMEZONE)
    start_date = now.replace(hour=8, minute=0, second=0, microsecond=0)
    end_date = now.replace(hour=23, minute=59, second=55, microsecond=0)

    if now < start_date or now > end_date:
        await call.message.answer("–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Telegram –ø—Ä–∞—Ü—é—î –∑ —Ç—ñ–ª—å–∫–∏ 8:00 –¥–æ 00:00")
        return

    support_ids = config.support_ids_shklo
    if not support_ids:
        await call.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    await SupportStates.waiting_live.set()
    await call.message.edit_text(
        "–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_cancel_kb(),
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=answer_live_cb.new(user_id=call.from_user.id),
        )
    )

    for user_id in support_ids:
        await bot.send_message(
            user_id,
            f"–ó –≤–∞–º–∏ —Ö–æ—á–µ –∑–≤—è–∑–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.get_mention()}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )

###########################################################

@dp.callback_query_handler(Text(equals="support_live3"))
async def call_support(call: CallbackQuery):
    await call.answer()
    now = datetime.now(TIMEZONE)
    start_date = now.replace(hour=8, minute=0, second=0, microsecond=0)
    end_date = now.replace(hour=23, minute=59, second=55, microsecond=0)

    if now < start_date or now > end_date:
        await call.message.answer("–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Telegram –ø—Ä–∞—Ü—é—î –∑ —Ç—ñ–ª—å–∫–∏ 8:00 –¥–æ 00:00")
        return

    support_ids = config.support_ids_shklo
    if not support_ids:
        await call.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    await SupportStates.waiting_live.set()
    await call.message.edit_text(
        "–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_cancel_kb(),
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=answer_live_cb.new(user_id=call.from_user.id),
        )
    )

    for user_id in support_ids:
        await bot.send_message(
            user_id,
            f"–ó –≤–∞–º–∏ —Ö–æ—á–µ –∑–≤—è–∑–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.get_mention()}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )

###########################################################################################

@dp.callback_query_handler(Text(equals="support_live7"))
async def call_support(call: CallbackQuery):
    await call.answer()
    now = datetime.now(TIMEZONE)
    start_date = now.replace(hour=8, minute=0, second=0, microsecond=0)
    end_date = now.replace(hour=23, minute=59, second=55, microsecond=0)

    if now < start_date or now > end_date:
        await call.message.answer("–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Telegram –ø—Ä–∞—Ü—é—î –∑ —Ç—ñ–ª—å–∫–∏ 8:00 –¥–æ 00:00")
        return

    support_ids = config.support_ids_shklo
    if not support_ids:
        await call.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    await SupportStates.waiting_live.set()
    await call.message.edit_text(
        "–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_cancel_kb(),
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=answer_live_cb.new(user_id=call.from_user.id),
        )
    )

    for user_id in support_ids:
        await bot.send_message(
            user_id,
            f"–ó –≤–∞–º–∏ —Ö–æ—á–µ –∑–≤—è–∑–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.get_mention()}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )

#################################################################

@dp.callback_query_handler(Text(equals="support_live4"))
async def call_support(call: CallbackQuery):
    await call.answer()
    now = datetime.now(TIMEZONE)
    start_date = now.replace(hour=8, minute=0, second=0, microsecond=0)
    end_date = now.replace(hour=23, minute=59, second=55, microsecond=0)

    if now < start_date or now > end_date:
        await call.message.answer("–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Telegram –ø—Ä–∞—Ü—é—î –∑ —Ç—ñ–ª—å–∫–∏ 8:00 –¥–æ 00:00")
        return

    support_ids = config.support_ids_berdikhiv
    if not support_ids:
        await call.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    await SupportStates.waiting_live.set()
    await call.message.edit_text(
        "–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_cancel_kb(),
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=answer_live_cb.new(user_id=call.from_user.id),
        )
    )

    for user_id in support_ids:
        await bot.send_message(
            user_id,
            f"–ó –≤–∞–º–∏ —Ö–æ—á–µ –∑–≤—è–∑–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.get_mention()}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )

##########################################################################

@dp.callback_query_handler(Text(equals="support_live5"))
async def call_support(call: CallbackQuery):
    await call.answer()
    now = datetime.now(TIMEZONE)
    start_date = now.replace(hour=8, minute=0, second=0, microsecond=0)
    end_date = now.replace(hour=23, minute=59, second=55, microsecond=0)

    if now < start_date or now > end_date:
        await call.message.answer("–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Telegram –ø—Ä–∞—Ü—é—î –∑ —Ç—ñ–ª—å–∫–∏ 8:00 –¥–æ 00:00")
        return

    support_ids = config.support_ids_berdikhiv
    if not support_ids:
        await call.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    await SupportStates.waiting_live.set()
    await call.message.edit_text(
        "–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_cancel_kb(),
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=answer_live_cb.new(user_id=call.from_user.id),
        )
    )

    for user_id in support_ids:
        await bot.send_message(
            user_id,
            f"–ó –≤–∞–º–∏ —Ö–æ—á–µ –∑–≤—è–∑–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.get_mention()}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )

##############################################################################

@dp.callback_query_handler(Text(equals="support_live6"))
async def call_support(call: CallbackQuery):
    await call.answer()
    now = datetime.now(TIMEZONE)
    start_date = now.replace(hour=8, minute=0, second=0, microsecond=0)
    end_date = now.replace(hour=23, minute=59, second=55, microsecond=0)

    if now < start_date or now > end_date:
        await call.message.answer("–°–ª—É–∂–±–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Telegram –ø—Ä–∞—Ü—é—î –∑ —Ç—ñ–ª—å–∫–∏ 8:00 –¥–æ 00:00")
        return

    support_ids = config.support_ids_berdikhiv
    if not support_ids:
        await call.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –Ω–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
        )
        return

    await SupportStates.waiting_live.set()
    await call.message.edit_text(
        "–í–∏ –∑–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫—É. –û—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞!",
        reply_markup=get_cancel_kb(),
    )

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton(
            text="–í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏",
            callback_data=answer_live_cb.new(user_id=call.from_user.id),
        )
    )

    for user_id in support_ids:
        await bot.send_message(
            user_id,
            f"–ó –≤–∞–º–∏ —Ö–æ—á–µ –∑–≤—è–∑–∞—Ç–∏—Å—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.get_mention()}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )

###############################################

@dp.message_handler(state=SupportStates.waiting_live, content_types=ContentType.ANY)
async def not_now_supported(message: Message):
    await message.answer(
        "–î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –≤—ñ–¥–º—ñ–Ω—ñ—Ç—å —Å–µ–∞–Ω—Å",
        reply_markup=get_cancel_kb(),
    )

@dp.callback_query_handler(answer_live_cb.filter())
async def answer_support_call(
    call: CallbackQuery, state: FSMContext, callback_data: dict
):
    support_id = call.from_user.id
    user_id = int(callback_data.get("user_id"))
    user_state = dp.current_state(user=user_id, chat=user_id)

    if await user_state.get_state() != SupportStates.waiting_live.state:
        await call.message.edit_text("–ó –∫–ª—ñ—î–Ω—Ç–æ–º –≤–∂–µ —Å–ø—ñ–ª–∫—É—é—Ç—å—Å—è –∞–±–æ –≤—ñ–Ω –ø–µ—Ä–µ–¥—É–º–∞–≤")
        return

    await state.set_state(SupportStates.busy.state)
    await state.update_data(second_id=user_id, is_support=True)

    await user_state.set_state(SupportStates.busy.state)
    await user_state.update_data(second_id=support_id, is_support=False)

    await call.message.edit_text(
        "–í–∏ –Ω–∞ –∑–≤—è–∑–∫—É —ñ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º!\n"
        "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=cancel_support,
    )
    await bot.send_message(
        user_id,
        "–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–∞ –∑–≤—è–∑–∫—É! –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç–∏ —Å—é–¥–∏ —Å–≤–æ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
        "–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=cancel_support,
    )


@dp.callback_query_handler(Text(equals="cancel_support"), state=SupportStates.busy)
async def exit_support(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    is_support = data["is_support"]
    second_id = data["second_id"]
    second_state = dp.current_state(user=second_id, chat=second_id)
    await state.finish()
    await second_state.finish()

    if is_support:
        text = "–¢–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞ —Å–µ–∞–Ω—Å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏"
    else:
        text = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ —Å–µ–∞–Ω—Å —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏"

    try:
        await bot.send_message(second_id, text)
    except Exception:
        pass

    await call.message.edit_text("–í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–µ–∞–Ω—Å")

############################################
#####=========–î–û–í–Ü–î–ù–ò–ö======################
############################################

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id:
        button_1 = KeyboardButton('–Ø–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ä–æ—É—Ç–µ—Ä')
        button_2 = KeyboardButton('–ß–æ–º—É —Ç—Ä–µ–±–∞ —á–∞—Å –≤—ñ–¥ —á–∞—Å—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç–∏ —Ä–æ—É—Ç–µ—Ä')
        button_3 = KeyboardButton('–Ø–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞—à –¥–æ–¥–∞—Ç–æ–∫')
        button_4 = KeyboardButton('–í—ñ–¥—Å—É—Ç–Ω—î –∑‚Äò—î–¥–Ω–∞–Ω–Ω—è —î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º?')
        button_5 = KeyboardButton('–Ø–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¢–ë')
        button_6 = KeyboardButton('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç')
        button_7 = KeyboardButton('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç–∏ EasyPay')
        button_8 = KeyboardButton('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
        button_9 = KeyboardButton('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à Instagram')
        button_10 = KeyboardButton('–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏')
        button_11 = KeyboardButton('–ù–∞—à—ñ —Ç–∞—Ä–∏—Ñ–∏')
        button_12 = KeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞')
        button_13 = KeyboardButton('–í–∏–π—Ç–∏ –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞')

        greet_kb = ReplyKeyboardMarkup(
    resize_keyboard=True
).add(button_1).add(button_2).add(button_3).add(button_4).add(button_5).add(button_6).add(button_7).add(button_8).add(button_9).add(button_10).add(button_11).add(button_12).add(button_13)
        
        await message.reply("–í—ñ—Ç–∞—î–º–æ –≤–∞—Å —É –¥–æ–≤—ñ–¥–Ω–∏–∫—É –ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫–æ—ó –º–µ—Ä–µ–∂—ñ SkyNet", reply_markup=greet_kb)

@dp.message_handler(lambda message: message.text == '–ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏')
async def restartmodem(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä –°–∫–∞–π–ù–µ—Ç\n–º.–ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫\n–≤—É–ª. –°.–ë–∞–Ω–¥–µ—Ä–∏, 17 (–±—ñ–ª—è –£–∫—Ä–ü–æ—à—Ç–∏)\nsupport@skynet-lan.org\n\n–¢–µ–ª–µ—Ñ–æ–Ω–∏ —Ç–µ—Ö–ø—ñ–¥—Ç—Ä–∏–º–∫–∏:\n–ù–æ–≤–æ—è–≤–æ—Ä—ñ–≤—Å—å–∫ (093) 97-64-405 | (068) 50-20-452\n\n–®–∫–ª–æ, –°—Ç–∞—Ä–∏—á—ñ, –í–µ—Ä–µ—â–∏—Ü—è (068) 68-31-891", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–ß–æ–º—É —Ç—Ä–µ–±–∞ —á–∞—Å –≤—ñ–¥ —á–∞—Å—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç–∏ —Ä–æ—É—Ç–µ—Ä')
async def restartmodem(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–ù–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Ç—É–∂–Ω–æ—Å—Ç—ñ —Ç–∞ –≤–∞—Ä—Ç–æ—Å—Ç—ñ –≤–∞—à–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞, –≤—ñ–¥ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —ñ –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –¥–æ –Ω—å–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤, —Ä–æ—É—Ç–µ—Ä –º–æ–∂–µ –∑–∞–≤–∏—Å–∞—Ç–∏. –ü—Ä–∏ —Ü—å–æ–º—É —É—Å—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –ø–æ–∫–∞–∑—É—é—Ç—å,—â–æ –≤—ñ–Ω –ø—Ä–∞—Ü—é—î —Å–ø—Ä–∞–≤–Ω–æ, –ø—Ä–æ—Ç–µ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –º–∏ —Ä–∞–¥–∏–º–æ –≤—ñ–¥–∫–ª—é—á–∞—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ –∂–∏–≤–ª–µ–Ω–Ω—è, –∞–±–æ –∂ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥‚Äò—î–¥–Ω–∞—Ç–∏ –π–æ–≥–æ –≤—ñ–¥ —Ä–æ–∑–µ—Ç–∫–∏ –Ω–∞ 10 —Ö–≤.–ó–∞ —Ü–µ–π —á–∞—Å –≤–∞—à —Ä–æ—É—Ç–µ—Ä –æ—Ç—Ä–∏–º–∞—î –Ω–æ–≤—É ip-–∞–¥—Ä–µ—Å—É —ñ –≤—ñ–¥–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–Ø–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–∞—à –¥–æ–¥–∞—Ç–æ–∫')
async def prilogenia(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ –º–æ–∂–Ω–∞ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ üëâ "'<a href="https://play.google.com/store/apps/details?id=com.softering.skynet">Play Market (Android)</a>'" –∞–±–æ " '<a href="https://apps.apple.com/us/app/skynet/id1484172373?l=ru&ls=1">AppStore(IOS)</a>'"", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–Ø–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ä–æ—É—Ç–µ—Ä')
async def router(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–ü–æ–∫—Ä–æ–∫–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è, —è–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Å–≤—ñ–π —Ä–æ—É—Ç–µ—Ä —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ.\n\n‚Ä¢–ü–µ—Ä—à –∑–∞ –≤—Å–µ, –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—ñ–¥‚Äò—î–¥–Ω–∞–π—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–±–µ–ª—å —É WAN-–ø–æ—Ä—Ç –≤–∞—à–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ (–∑–∞–∑–≤–∏—á–∞–π, –≤—ñ–Ω –≤–∏–¥—ñ–ª–µ–Ω–∏–π –æ–∫—Ä–µ–º–∏–º –∫–æ–ª—å–æ—Ä–æ–º –Ω–∞ –∑–∞–¥–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ –∫–æ—Ä–ø—É—Å—É).\n\n‚Ä¢–ü—ñ—Å–ª—è —Ü—å–æ–≥–æ –∑–Ω–∞–π–¥—ñ—Ç—å –Ω–∞ –Ω–∏–∂–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Ä–æ—É—Ç–µ—Ä–∞ –∑–∞–≤–æ–¥—Å—å–∫—É –Ω–∞–∫–ª–µ–π–∫—É —ñ–∑ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –Ω–∞ –Ω—ñ–π –Ω–∞–∑–≤–æ—é Wifi-–º–µ—Ä–µ–∂—ñ —ñ –ø–∞—Ä–æ–ª–µ–º –¥–æ –Ω–µ—ó.\n–í–∞—à —Ä–æ—É—Ç–µ—Ä –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.\n\n–î–∞–ª—ñ –∑–Ω–∞–π–¥—ñ—Ç—å –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó, —è–∫–∏–π –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏–º–µ—Ç–µ –¥–æ Wifi (—Ç–µ–ª–µ—Ñ–æ–Ω, –Ω–æ—É—Ç–±—É–∫) –Ω–∞–∑–≤—É –≤–∞—à–æ—ó –º–µ—Ä–µ–∂—ñ —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å.\n–ì–æ—Ç–æ–≤–æ! ", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–ù–∞—à—ñ —Ç–∞—Ä–∏—Ñ–∏')
async def taruf(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–û–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –Ω–∞—à–∏–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ üëâ "'<a href="https://www.skynet-lan.org/taryfy.html">–¢–∞—Ä–∏—Ñ–∏</a>'"", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à –≤–µ–±-—Å–∞–π—Ç')
async def sayt(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–ù–∞—à –≤–µ–±-—Å–∞–π—Ç üëâ "'<a href="http://skynet-lan.org/">SkyNet</a>'"", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–ö–æ–Ω—Ç–∞–∫—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞')
async def rozrab(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"üë®‚ÄçüíªDeveloped: Nazar Ivakhiv | @ivakhiv_off - Telegram", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–Ø–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –¢–ë')
async def TB(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–¢–µ–ª–µ–±–∞—á–µ–Ω–Ω—è –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å!\n\n–ü—ñ–¥–∫–ª—é—á–∞–π—Ç–µ –æ–Ω–ª–∞–π–Ω —Ç–≤ –Ω–∞ —Ç–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ, —è–∫–∏–π –æ–±–µ—Ä–µ—Ç–µ –≤–∏ —Å–∞–º—ñ –±–µ–∑ –±—É–¥—å —è–∫–∏—Ö –æ–±–º–µ–∂–µ–Ω—å.\n\n–î–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –º–∏ –∑—ñ–±—Ä–∞–ª–∏ –Ω–∞–π–±—ñ–ª—å—à –ø–æ—à–∏—Ä–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–º —Ç–∞ —ñ–Ω–æ–∑–µ–º–Ω–∏–º —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è–º, –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —è–∫—ñ –º–æ–∂–Ω–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏—Ö —Å–∞–π—Ç—ñ–≤:\n\n"'<a href="https://oll.tv/ru/oixs_offer">‚Ä¢OLL.TV</a>'"\n"'<a href="https://megogo.net/ua">‚Ä¢MEGOGO.NET</a>'"\n"'<a href="https://omegatv.ua/">‚Ä¢OmegaTV.ua</a>'"\n"'<a href="https://divan.tv/">‚Ä¢DIVAN.TV</a>'"\n"'<a href="https://sweet.tv/">‚Ä¢SWEET.TV</a>'"\n\n–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Ä–≤—ñ—Å–∞–º–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å –Ω–∞ —Å–∞–π—Ç—ñ –æ–±—Ä–∞–Ω–æ–≥–æ –≤–∞–º–∏ –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫–∞ —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–∞—Ç–∏ —Ç–æ–π —Ç–∞—Ä–∏—Ñ–Ω–∏–π –ø–ª–∞–Ω, —è–∫–∏–π –≤–∞–º –Ω–∞–π–±—ñ–ª—å—à–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å.\n\n–î–ª—è –ø–æ–¥–∞–ª—å–Ω–æ—ó —Ä–æ–±–æ—Ç–∏, –∞ —Ç–∞–∫–æ–∂ –æ–ø–ª–∞—Ç–∏ –ø–æ—Å–ª—É–≥  –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —ñ –ø—ñ–¥–∫–∞–∑–∫–∞–º–∏ –Ω–∞ —Å–∞–π—Ç–∞—Ö –ø–æ—Å—Ç–∞—á–∞–ª—å–Ω–∏–∫—ñ–≤ —Ç–∞ –Ω–∞—Å–æ–ª–æ–¥–∂—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–≥–ª—è–¥–æ–º —É–ª—é–±–ª–µ–Ω–∏—Ö —Ç–µ–ª–µ–≤—ñ–∑—ñ–π–Ω–∏—Ö –ø—Ä–æ–≥—Ä–∞–º —ñ —Ñ—ñ–ª—å–º—ñ–≤.", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–∞—à Instagram')
async def inst(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–ù–∞—à Instagram üëâ "'<a href="https://www.instagram.com/skynet_novoyavorivsk/">SkyNet</a>'"", parse_mode='html')        

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç –æ–ø–ª–∞—Ç–∏ EasyPay')
async def easypay(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–û–ø–ª–∞—Ç–∞ EasyPay üëâ "'<a href="https://easypay.ua/catalog/internet/skynet">EasyPay SkyNet</a>'"", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
async def saytkab(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å –Ω–∞ –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üëâ "'<a href="http://next.e-xata.net.ua/cgi-bin/stat.pl">–ö–∞–±—ñ–Ω–µ—Ç SkyNet</a>'"", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–í—ñ–¥—Å—É—Ç–Ω—î –∑‚Äò—î–¥–Ω–∞–Ω–Ω—è —î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º?')
async def propavinet(message):
    user_id = str(message.from_user.id)
    if user_id:

        await bot.send_message(message.chat.id, f"–ü—Ä–∏—á–∏–Ω –º–æ–∂–µ –±—É—Ç–∏ –±–µ–∑–ª—ñ—á, –ø—Ä–æ—Ç–µ —î 4 –Ω–∞–π—á–∞—Å—Ç—ñ—à—ñ, —è–∫—ñ –∫–æ–∂–µ–Ω –Ω–∞—à –∞–±–æ–Ω–µ–Ω—Ç –º–æ–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ.\n–ó–±–µ—Ä—ñ–≥–∞–π, —â–æ–± –Ω–µ –∑–∞–≥—É–±–∏—Ç–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—éüòâ\n\nüí†–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É. –ó–≤—É—á–∏—Ç—å –±–∞–Ω–∞–ª—å–Ω–æ, –ø—Ä–æ—Ç–µ —Ü–µ –Ω–∞–π—á–∞—Å—Ç—ñ—à–∞ –ø—Ä–∏—á–∏–Ω–∞. –©–æ–± –ø–æ–¥—ñ–±–Ω–æ–≥–æ –Ω–µ —Å—Ç–∞–≤–∞–ª–æ—Å—å, –∑–∞–≤–∞–Ω—Ç–∞–∂—É–π –¥–æ–¥–∞—Ç–æ–∫ SkyNet —Ç–∞ –æ—Ç—Ä–∏–º—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç–∞–Ω –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –∑–∞ –ª—ñ—á–µ–Ω—ñ —Å–µ–∫—É–Ω–¥–∏, –∞ —Ç–∞–∫–æ–∂ –º–∏—Ç—Ç—î–≤–æ –ø–æ–ø–æ–≤–Ω—é–π.\n\nüí†–ó–∞–≤–∏—Å —Ä–æ—É—Ç–µ—Ä. –Ü–Ω–æ–¥—ñ –Ω–∞–≤—ñ—Ç—å –Ω–∞–π–∫—Ä–∞—â–∞ —Ç–µ—Ö–Ω—ñ–∫–∞ –º–æ–∂–µ –¥–∞—Ç–∏ –∑–±—ñ–π. –£ —Ç–∞–∫—ñ–π —Å–∏—Ç—É–∞—Ü—ñ—ó –ø—Ä–æ—Å—Ç–æ –≤–∏–º–∫–Ω–∏ —Ç–≤—ñ–π —Ä–æ—É—Ç–µ—Ä –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω, –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ —É–≤—ñ–º–∫–Ω–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –∑‚Äò—î–¥–Ω–∞–Ω–Ω—è.\n\nüí†–ü–µ—Ä–µ–±–∏—Ç–∏–π –∫–∞–±–µ–ª—å. –î—É–∂–µ —á–∞—Å—Ç–æ –ø—Ä–∏—á–∏–Ω–æ—é —Ü—å–æ–º—É —î –¥–æ–º–∞—à–Ω—ñ —Ç–≤–∞—Ä–∏–Ω–∏, —è–∫—ñ –ø–æ–ª—é–±–ª—è—é—Ç—å –≥—Ä–∏–∑—Ç–∏ –º–µ—Ä–µ–∂–µ–≤–∏–π –∫–∞–±–µ–ª—å, –∞–±–æ –≤–∞–∂–∫—ñ –º–µ–±–ª—ñ, —è–∫—ñ –º–æ–∂—É—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–≤–µ—Ä—Ö—É. –ü–µ—Ä–µ–≤—ñ—Ä –º–æ–∂–ª–∏–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∫–∞–±–µ–ª–µ–º –ø—Ä–æ—Å—Ç–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ –æ–≥–ª—è–Ω—É–≤—à–∏ –π–æ–≥–æ, —ñ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É–π –Ω–∞ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: (068) 50 20 452.\n\nüí†–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç-–∫–∞–±–µ–ª—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤ –ø–æ–º–∏–ª–∫–æ–≤–∏–π –ø–æ—Ä—Ç. –ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É, –ø–µ—Ä–µ–≤–∞–∂–Ω–∞ –±—ñ–ª—å—à—ñ—Å—Ç—å –≤–∏—Ä–æ–±–Ω–∏–∫—ñ–≤ –≤–∏–¥—ñ–ª—è—é—Ç—å –ø–æ—Ä—Ç –¥–ª—è –º–µ—Ä–µ–∂–µ–≤–æ–≥–æ –∫–∞–±–µ–ª—è —ñ–Ω—à–∏–º –∫–æ–ª—å–æ—Ä–æ–º, –∞–±–æ –ø–æ–∑–Ω–∞—é—Ç—å —Å–ª–æ–≤–æ–º ‚Äúinternet‚Äù, ‚Äúwan‚Äù.\n\n–Ø–∫—â–æ –∂ –ø—Ä–∏—á–∏–Ω–∞ –≤ —ñ–Ω—à–æ–º—É, —Ç–µ–ª–µ—Ñ–æ–Ω—É–π —É –Ω–∞—à—É —Å–ª—É–∂–±—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏, —Ç–æ–±—ñ –Ω–∞–¥–∞–¥—É—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø–æ –º–æ–∂–ª–∏–≤–∏—Ö –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö, –∞–±–æ –∑–∞–≤—ñ—Ç–∞—é—Ç—å –¥–æ —Ç–µ–±–µ, —â–æ–± —ó—Ö —É—Å—É–Ω—É—Ç–∏.", parse_mode='html')  

@dp.message_handler(lambda message: message.text == '–í–∏–π—Ç–∏ –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞')
async def stop(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id:
        del_buttons = ReplyKeyboardRemove()
        await message.reply("–í–∏ –≤–∏–π—à–ª–∏ –∑ –¥–æ–≤—ñ–¥–Ω–∏–∫–∞,—Ç–∞ –º–æ–∂–µ—Ç–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üëâ /start",reply_markup=del_buttons)

##############################################
######=========ADMIN========##################
##############################################

@dp.message_handler(commands=['adm','admin'])
async def adm(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in config.admin:
        button_1 = KeyboardButton('–ó–±–µ—Ä–µ–≥—Ç–∏ –±–∞–∑—É')
        button_2 = KeyboardButton('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ')
        button_3 = KeyboardButton('–†–æ–∑—Å–∏–ª–∫–∞')
        button_4 = KeyboardButton('–ó–∞–∫—Ä–∏—Ç–∏')

        greet_kb = ReplyKeyboardMarkup(resize_keyboard=True)
        greet_kb.add(button_1, button_2, button_3, button_4)

        await message.reply("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∞", reply_markup=greet_kb)

@dp.callback_query_handler(lambda call: call.data == 'stop_rozsulka' , state='*')
async def perevikra_no(call: CallbackData,state: FSMContext):
    await bot.send_message(call.message.chat.id, f"–í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ —Ä–æ–∑—Å–∏–ª–∫—É.", parse_mode="Markdown")
    await call.message.edit_reply_markup()
    await state.finish()

@dp.message_handler(lambda message: message.text == '–ó–∞–∫—Ä–∏—Ç–∏')
async def stop(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in config.admin:
        del_buttons = ReplyKeyboardRemove()
        await message.reply("–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ",reply_markup=del_buttons)

@dp.message_handler(lambda message: message.text == '–ó–±–µ—Ä–µ–≥—Ç–∏ –±–∞–∑—É')
async def save(message):
    user_id = str(message.from_user.id)
    if user_id in config.admin:
        save = open("clients.db", 'rb')
        await bot.send_document(message.from_user.id, save, reply_to_message_id=message.message_id)

@dp.message_handler(lambda message: message.text == '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ')
async def users(message):
    user_id = str(message.from_user.id)
    if user_id in config.admin:
        with sq.connect("clients.db") as con:
            cur = con.cursor()

        cur.execute(f"SELECT count(*) FROM users")

        stat = str(cur.fetchall()[0][0])
        await bot.send_message(message.chat.id, f"–£ –±–æ—Ç—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: <b>{stat}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!", parse_mode='html')

@dp.message_handler(lambda message: message.text == '–†–æ–∑—Å–∏–ª–∫–∞')
async def rozsulka(message):
    user_id = str(message.from_user.id)
    if user_id in config.admin:
        await message.reply('–û—á—ñ–∫—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...' , reply_markup=stop_keyboard)
        await Mailing.Text.set()

@dp.message_handler(state=Mailing.Text, content_types=types.ContentType.ANY)
async def rozsulka_full(message: types.Message, state: FSMContext):
    with sq.connect("clients.db") as con:
        cur = con.cursor()

    cur.execute(f"""SELECT id FROM users""")
    call_sp = cur.fetchall()

    error = 0
    good = 0
    while call_sp != []:
        first_user = call_sp[0][0]
        del [call_sp[0]]
        try:
            await message.copy_to(first_user)
            good += 1
        except:
            error += 1
    await bot.send_message(config.error, f"–†–æ–∑—Å–∏–ª–∫–∞: \n–£—Å–ø—ñ—à–Ω–æ: {good} \n–ù–µ –ø—Ä–∏–π—à–ª–æ: {error}")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)